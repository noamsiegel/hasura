// Code generated by github.com/hasura/ndc-sdk-go/cmd/hasura-ndc-go, DO NOT EDIT.
package weather

// ToMap encodes the struct to a value map
func (j DailyItem) ToMap() map[string]any {
	r := make(map[string]any)
	r["clouds"] = j.Clouds
	r["date"] = j.Date
	r["feels_like"] = j.FeelsLike
	r["pop"] = j.Pop
	r["summary"] = j.Summary
	r["sunrise"] = j.Sunrise
	r["sunset"] = j.Sunset
	r["temp"] = j.Temp
	r["uvi"] = j.Uvi
	j_Weather := make([]any, len(j.Weather))
	for i, j_Weather_v := range j.Weather {
		j_Weather[i] = j_Weather_v
	}
	r["weather"] = j_Weather
	r["wind_deg"] = j.WindDeg
	r["wind_gust"] = j.WindGust
	r["wind_speed"] = j.WindSpeed

	return r
}

// ToMap encodes the struct to a value map
func (j FeelsLike) ToMap() map[string]any {
	r := make(map[string]any)
	r["day"] = j.Day
	r["eve"] = j.Eve
	r["morn"] = j.Morn
	r["night"] = j.Night

	return r
}

// ToMap encodes the struct to a value map
func (j Temperature) ToMap() map[string]any {
	r := make(map[string]any)
	r["day"] = j.Day
	r["eve"] = j.Eve
	r["max"] = j.Max
	r["min"] = j.Min
	r["morn"] = j.Morn
	r["night"] = j.Night

	return r
}

// ToMap encodes the struct to a value map
func (j WeatherDataResponse) ToMap() map[string]any {
	r := make(map[string]any)
	j_WeatherData_obj := make(map[string]any)
	j_WeatherData_Daily := make([]any, len(j.WeatherData.Daily))
	for i, j_WeatherData_Daily_v := range j.WeatherData.Daily {
		j_WeatherData_Daily[i] = j_WeatherData_Daily_v
	}
	j_WeatherData_obj["daily"] = j_WeatherData_Daily
	j_WeatherData_obj["lat"] = j.WeatherData.Lat
	j_WeatherData_obj["lon"] = j.WeatherData.Lon
	j_WeatherData_obj["timezone"] = j.WeatherData.Timezone
	r["weatherData"] = j_WeatherData_obj

	return r
}

// ToMap encodes the struct to a value map
func (j WeatherInfo) ToMap() map[string]any {
	r := make(map[string]any)
	r["description"] = j.Description
	r["icon"] = j.Icon
	r["id"] = j.ID
	r["main"] = j.Main

	return r
}
